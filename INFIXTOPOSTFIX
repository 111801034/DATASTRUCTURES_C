#include <stdio.h>
#include<stdlib.h>
struct Stack{
  int *array;
  int top;
  int size;
};

struct Stack*createStack(int size){
  struct Stack*s=malloc(sizeof(struct Stack));
  s->size=size;
  s->array=malloc(size*sizeof(int));
  s->top=-1;
  return s;
}

void push(struct Stack*s,char elt){
  if(s->top!=s->size-1){
    s->top++;
    s->array[s->top]=elt;
  }
  else{
    printf("offoo the stack is already full\n");
  }
}

char pop(struct Stack*s){
  if(s->top==-1){
    printf("ohhhh poor boy, the Stack is empty\n");
    return -1;
  }
  else{
    int item=s->array[s->top];
    s->top--;
    return item;
  }
}

int isOperator(char c){
  if(c=='+'||c=='-'||c=='*'||c=='/'||c=='^'){
    return 1;
  }
  return 0;
}

int prec(char c){
  if(c=='^')return 5;
  if(c=='/'||c=='*')return 4;
  if(c=='+'||c=='-')return 3;
  if(c=='(')return 2;
  else return -1;
}

void inToPost(char arr[],int size){
  struct Stack*s=createStack(size);
  for(int i=0;i<size;i++){
    if(arr[i]=='('){
      push(s,'(');
    }
    else if(arr[i]==')'){
      while(s->array[s->top]!='('&&s->top!=-1){
        printf("%c",pop(s));
      }
      if(s->array[s->top]=='('){
        pop(s);
      }
      else{
        printf("-1\n");
      }
    }
    else if(isOperator(arr[i])){
      while(prec(s->array[s->top])>=prec(arr[i])&&s->top!=-1){
        printf("%c",pop(s));
      }
      push(s,arr[i]);
    }
    else{
      printf("%c",arr[i]);
    }
  }
  for(int i=s->top;i>=0;i--){
    printf("%c",pop(s));
  }
  printf("\n*********\n");
}
int main(void) {
  char arr[]="a+b*(c^d-e)^(f+g*h)-i";
  //"abcd^e-fgh*+^*+i-";
  int size=sizeof(arr)/sizeof(arr[0]);
  inToPost(arr,size);
  printf("Hello World\n");
  return 0;
}
